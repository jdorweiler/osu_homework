Microsoft (R) Macro Assembler Version 10.00.30319.01	    02/14/14 15:24:50
 CS271 homework #3			(primes.asm	     Page 1 - 1


				TITLE CS271 homework #3			(primes.asm)
				; Name: Jason Dorweiler
				;
				; Description: Calcualte and print out primes based on a user entered limit
				;	The algorithm uses a sieve of Eratosthenes method
				;	https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes
				;	A static array holds boolean values that show if the 
				;	index number of that element is prime Array[i] 1:prime 0:not prime
				;	
				; Course : CS271
				; Revision date: 2/9/14

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 20 20 20 20 43	intro_1		BYTE	"    CS271 Homework #4 Prime number calculator  by Jason Dorweiler", 0
	   53 32 37 31 20
	   48 6F 6D 65 77
	   6F 72 6B 20 23
	   34 20 50 72 69
	   6D 65 20 6E 75
	   6D 62 65 72 20
	   63 61 6C 63 75
	   6C 61 74 6F 72
	   20 20 62 79 20
	   4A 61 73 6F 6E
	   20 44 6F 72 77
	   65 69 6C 65 72
	   00
 00000042 45 6E 74 65 72	prompt_1	BYTE	"Enter your name: ", 0
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   3A 20 00
 00000054 45 6E 74 65 72	prompt_2	BYTE	"Enter a number from 1 .. 200 and I will calculate that number of primes", 0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   66 72 6F 6D 20
	   31 20 2E 2E 20
	   32 30 30 20 61
	   6E 64 20 49 20
	   77 69 6C 6C 20
	   63 61 6C 63 75
	   6C 61 74 65 20
	   74 68 61 74 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   73 00
 0000009C 45 6E 74 65 72	prompt_3	BYTE	"Enter a number: ", 0
	   20 61 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000000AD 20 48 65 6C 6C	greeting	BYTE	" Hello, ", 0
	   6F 2C 20 00
 000000B6 47 6F 6F 64 62	goodbye		BYTE	"Goodbye, ",0
	   79 65 2C 20 00
 000000C0 4E 75 6D 62 65	error		BYTE	"Numbers from 1 - 200 only",0
	   72 73 20 66 72
	   6F 6D 20 31 20
	   2D 20 32 30 30
	   20 6F 6E 6C 79
	   00
 000000DA 20 20 20 00		Lspaces		BYTE	"   ",0
 000000DE 20 00			Sspaces		BYTE	" ",0
 = 000000C8			numLimit = 200					;upper limit on number that is entered	
 = 00000050			MAX = 80
 = 000005DC			arrayLimit	= 1500						;we need a static array big enough to calculate 200 primes
 = 0000002A			sqrtLimit	=	42						;sqrt(arrayLimit) hard coded for now untill I can figure out how to calculate a square root
														;this is needed to control the outter loop of the seive.
 000000E0 00000000		number		DWORD	?					;current user entered number
 000000E4 00000000		prime		DWORD	?					;temp prime number storage
 000000E8  00000051 [		UsrName		BYTE	MAX+1 DUP(?)		;max user name, +1 for null
	    00
	   ]
 00000139  000005DC [		numArray	DWORD	arrayLimit DUP(0)	;array for arrayLimit numbers
	    00000000
	   ]
 = 0000000A			lineNum	= 10							;number of primes printed on a line 
 = 000003E8			printNum = 1000							;largest prime we need to print


 00000000			.code
 00000000			main PROC

 00000000  E8 00000014			call	intro
 00000005  E8 0000003F			call	getName
 0000000A  E8 000000BC			call	setupArray	;sets the array to hold primes
 0000000F  E8 000000D7			call	calcPrimes	
 00000014  E8 00000010			call	farewell

 00000019			main ENDP

				;Procedure to print intro
				;receives: intro_1 as global
				;returns: nothing
				;preconditions: none
				;registers changed edx
 00000019			intro PROC
					; print title and get users name
 00000019  BA 00000000 R		mov edx, OFFSET intro_1
 0000001E  E8 00000000 E		call	WriteString
 00000023  E8 00000000 E		call	CrLf
 00000028  C3				ret
 00000029			intro ENDP

				;Procedure to print farewell
				;receives: intro_1 as global
				;returns: nothing
				;preconditions: none
				;registers changed edx
 00000029			farewell PROC
					; Say goodbye
 00000029  E8 00000000 E		call	CrLf
 0000002E  BA 000000B6 R		mov edx, OFFSET goodbye
 00000033  E8 00000000 E		call	WriteString
 00000038  BA 000000E8 R		mov edx, OFFSET usrName
 0000003D  E8 00000000 E		call	WriteString
 00000042  E8 00000000 E		call	CrLf
 00000047  58				pop eax
 00000048  C3				ret
 00000049			farewell ENDP


				;Procedure to get users name
				;receives: prompt_1, prompt_2, greeting as global
				;returns: global UsrName
				;preconditions: none
				;registers changed edx, ecx
 00000049			getName PROC
					; Ask user for their name
 00000049  BA 00000042 R		mov edx, OFFSET prompt_1
 0000004E  E8 00000000 E		call	WriteString
					;get name from user
 00000053  BA 000000E8 R		mov edx, OFFSET UsrName
 00000058  B9 00000050			mov	ecx, MAX
 0000005D  E8 00000000 E		call	ReadString
 00000062  E8 00000000 E		call	CrLf
 00000067  E8 00000000 E		call	CrLf
					; greet the user
 0000006C  BA 000000AD R		mov edx, OFFSET greeting
 00000071  E8 00000000 E		call	WriteString
 00000076  BA 000000E8 R		mov edx, OFFSET UsrName
 0000007B  E8 00000000 E		call	WriteString
 00000080  E8 00000000 E		call	CrLf
 00000085  E8 00000000 E		call	CrLf
					; print out instructions
 0000008A			getNumber:
 0000008A  BA 00000054 R		mov edx, OFFSET prompt_2
 0000008F  E8 00000000 E		call	WriteString
 00000094  E8 00000000 E		call	CrLf
 00000099  E8 00000000 E		call	CrLf
 0000009E  E8 00000000 E		call	ReadInt
 000000A3  A3 000000E0 R		mov	number, eax
 000000A8  3D 000000C8			cmp eax, numLimit
 000000AD  7F 0B			jg printError
 000000AF  83 F8 00			cmp eax, 0
 000000B2  7E 06			jle printError
 000000B4  E8 00000000 E		call	CrLf
 000000B9  C3				ret
 000000BA			printError:
 000000BA  BA 000000C0 R		mov edx, OFFSET error
 000000BF  E8 00000000 E		call	WriteString
 000000C4  E8 00000000 E		call	CrLf
 000000C9  EB BF			jmp getNumber
 000000CB			getName ENDP

 000000CB			setupArray PROC
				;Procedure to fill the static array with 1s
				;receives: numArray global
				;returns: changes value in numArray
				;preconditions: none
				;registers changed eax, ecx
 000000CB  33 C9			xor ecx, ecx
 000000CD				restart:
 000000CD  8B C1			mov eax, ecx
 000000CF  C7 04 8D			mov [numArray+4*ecx], 1	;set array to 1
	   00000139 R
	   00000001
 000000DA  8B 04 8D			mov eax, [numArray+4*ecx]
	   00000139 R
 000000E1  41				inc	ecx
 000000E2  81 F9 000005DB		cmp ecx, [arrayLimit-1]		;upto arrayLimit-1 since we starte ecx at 0
 000000E8  72 E3			jb	restart
 000000EA  C3				ret
 000000EB			setupArray ENDP


 000000EB			calcPrimes PROC
				;Procedure to calculate primes with sieve of Eratosthenes
				; the outter loop runs from i=0 to i < sqrt(n)
				; inner loop runs from i=i^2 i < n 
				;receives: numArray, sqrtLimit, lineNum as globals
				;returns: changes value in numArray
				;preconditions: numArray is initialized to all 1s
				;registers changed edx, ebx, edi, eax, ecx
 000000EB  8B FC			mov edi, esp	;stack got a little wonky so store esp for later
 000000ED  33 C9			xor ecx, ecx
 000000EF  33 DB			xor ebx, ebx
 000000F1  33 C0			xor eax, eax
 000000F3  33 D2			xor edx, edx
 000000F5  B9 0000002A			mov ecx, sqrtLimit
 000000FA  83 C0 02			add eax, 2
 000000FD  50				push eax					;store counter on stack

 000000FE				outterLoop:
 000000FE  51				push ecx
 000000FF  B8 0000002C			mov eax, [sqrtLimit+2]		
 00000104  2B C1			sub eax, ecx				;eax stores i, outter loop counter
 00000106  50				push eax	
 00000107  83 3C 85			cmp [numArray+4*eax], 1
	   00000139 R 01
 0000010F  75 29			jne	increment
						
 00000111				innerLoop:
 00000111  58				pop eax
 00000112  50				push eax		;store i
 00000113  52				push edx		;store j
 00000114  F7 E0			mul eax			; eax^2
 00000116  5A				pop edx			; j off stack
 00000117  5B				pop ebx			;get i off stack, ebx now contains i
 00000118  53				push ebx		;store i back on stack
 00000119  50				push eax		;store i^2
 0000011A  8B C2			mov eax, edx	;inner loop counter in eax (j)
 0000011C  52				push edx		; store j on stack
 0000011D  F7 E3			mul ebx			; i*j, stored in eax
 0000011F  5A				pop edx			; get j from stack
 00000120  8B D8			mov ebx, eax	;copy to ebx
 00000122  58				pop eax			;get i^2 from stack
 00000123  03 C3			add	eax, ebx	;eax now contains i^2+j*i
 00000125  3D 000005DC			cmp eax, arrayLimit
 0000012A  7F 0E			jg	increment

 0000012C				setPrime:
 0000012C  C7 04 85			mov [numArray+4*eax], 0	; this is not a prime now
	   00000139 R
	   00000000
 00000137  42				inc edx					;j++ counter
 00000138  EB D7			jmp innerLoop

 0000013A				increment:
 0000013A  BA 00000000			mov edx, 0		;set inner loop counter to 0
 0000013F  E2 BD			loop outterLoop	; use loop for counter in assignment requirements
					
 00000141				getOut:
 00000141  E8 00000003			call printArray
 00000146  8B E7			mov esp, edi	;move the stored esp back
 00000148  C3				ret
 00000149			calcPrimes ENDP

				;Procedure to calculate primes with sieve of Eratosthenes
				; the outter loop runs from i=0 to i < sqrt(n)
				; inner loop runs from i=i^2 i < n 
				;receives: numArray, sqrtLimit, lineNum as globals
				;returns: changes value in numArray
				;preconditions: numArray is initialized to all 1s
				;registers changed edx, ebx, edi, eax, ecx
 00000149			printArray PROC
 00000149  33 C9			xor ecx, ecx
 0000014B  33 DB			xor ebx, ebx
 0000014D  33 D2			xor edx, edx

 0000014F  BB 00000002			mov ebx, 2
 00000154  8B 0D 000000E0 R		mov ecx, number

 0000015A				continue:
 0000015A  8B 04 9D			mov eax, [numArray+4*ebx]
	   00000139 R
 00000161  83 F8 01			cmp eax, 1
 00000164  7C 47			jl skip
 00000166  8B C3			mov eax, ebx
 00000168  E8 00000000 E		call	WriteDec
 0000016D  52				push edx		;store counter for number of primes on a line
 0000016E  53				push ebx		;store ebx on stack
 0000016F  A3 000000E4 R		mov prime, eax
 00000174  BA 000000DA R		mov edx, OFFSET Lspaces
 00000179  E8 00000000 E		call	WriteString
 0000017E  B8 000003E8			mov eax, printNum

 00000183				printSpaces:
 00000183  BB 0000000A			mov ebx, 10
 00000188  3B 05 000000E4 R		cmp eax, prime
 0000018E  7C 0F			jl noSpace		;prime is greater or equal so don't print spaces
 00000190  99				cdq
 00000191  F7 FB			idiv ebx		;eax/ebx, quotent in eax
 00000193  BA 000000DE R		mov edx, OFFSET Sspaces
 00000198  E8 00000000 E		call	WriteString
 0000019D  EB E4			jmp printSpaces

 0000019F				noSpace:
 0000019F  5B				pop ebx
 000001A0  5A				pop edx
 000001A1  49				dec ecx			;number of primes printed
 000001A2  42				inc edx
 000001A3  83 FA 0A			cmp edx, lineNum
 000001A6  7C 05			jl skip
 000001A8  E8 00000000 E		call	CrLf

 000001AD				skip:
 000001AD  43				inc	ebx	
 000001AE  41				inc ecx
 000001AF  83 FA 0A			cmp edx, lineNum
 000001B2  7C 05			jl toTop
 000001B4  BA 00000000			mov edx, 0

 000001B9				toTop:
 000001B9  E2 9F			loop continue	;use loop to print primes from the array
 000001BB  C3				ret
 000001BC			printArray ENDP
				END main 
Microsoft (R) Macro Assembler Version 10.00.30319.01	    02/14/14 15:24:50
 CS271 homework #3			(primes.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000018A9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001BC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcPrimes . . . . . . . . . . .	P Near	 000000EB _TEXT	Length= 0000005E Public STDCALL
  outterLoop . . . . . . . . . .	L Near	 000000FE _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000111 _TEXT	
  setPrime . . . . . . . . . . .	L Near	 0000012C _TEXT	
  increment  . . . . . . . . . .	L Near	 0000013A _TEXT	
  getOut . . . . . . . . . . . .	L Near	 00000141 _TEXT	
farewell . . . . . . . . . . . .	P Near	 00000029 _TEXT	Length= 00000020 Public STDCALL
getName  . . . . . . . . . . . .	P Near	 00000049 _TEXT	Length= 00000082 Public STDCALL
  getNumber  . . . . . . . . . .	L Near	 0000008A _TEXT	
  printError . . . . . . . . . .	L Near	 000000BA _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000019 _TEXT	Length= 00000010 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000019 Public STDCALL
printArray . . . . . . . . . . .	P Near	 00000149 _TEXT	Length= 00000073 Public STDCALL
  continue . . . . . . . . . . .	L Near	 0000015A _TEXT	
  printSpaces  . . . . . . . . .	L Near	 00000183 _TEXT	
  noSpace  . . . . . . . . . . .	L Near	 0000019F _TEXT	
  skip . . . . . . . . . . . . .	L Near	 000001AD _TEXT	
  toTop  . . . . . . . . . . . .	L Near	 000001B9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setupArray . . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 00000020 Public STDCALL
  restart  . . . . . . . . . . .	L Near	 000000CD _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Lspaces  . . . . . . . . . . . .	Byte	 000000DA _DATA	
MAX  . . . . . . . . . . . . . .	Number	 00000050h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Sspaces  . . . . . . . . . . . .	Byte	 000000DE _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UsrName  . . . . . . . . . . . .	Byte	 000000E8 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLimit . . . . . . . . . . .	Number	 000005DCh   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 000000C0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000000B6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000000AD _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNum  . . . . . . . . . . . .	Number	 0000000Ah   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000139 _DATA	
numLimit . . . . . . . . . . . .	Number	 000000C8h   
number . . . . . . . . . . . . .	DWord	 000000E0 _DATA	
prime  . . . . . . . . . . . . .	DWord	 000000E4 _DATA	
printNum . . . . . . . . . . . .	Number	 000003E8h   
prompt_1 . . . . . . . . . . . .	Byte	 00000042 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000054 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 0000009C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sqrtLimit  . . . . . . . . . . .	Number	 0000002Ah   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
