Microsoft (R) Macro Assembler Version 10.00.30319.01	    03/10/14 09:08:05
&CS271 homework #6b			(combintions.asm     Page 1 - 1


				TITLE CS271 homework #6b			(combintions.asm)
				; Name: Jason Dorweiler
				;
				; Description:  Generates a random C(n,r) problem that is displayed to the 
				;	user.  The user's input is read using writeStr, a procedure that reads
				;	a string and converts it to a decimal number. 
				;
				; Course : CS271
				; Revision date: 3/10/14

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;write string macro used in lecture
				WriteStr MACRO buffer
					push edx
					mov edx, OFFSET buffer
					call WriteString
					pop edx
				ENDM

 00000000			.data
 = 0000000C			hi = 12
 = 00000001			Rlo = 1
 = 00000003			Nlo = 3
 = 00000064			MAXSIZE	= 100

 00000000 57 65 6C 63 6F	prompt1	BYTE "Welcome to the combinations calculator by Jason Dorweiler",0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   63 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 73 20 63 61
	   6C 63 75 6C 61
	   74 6F 72 20 62
	   79 20 4A 61 73
	   6F 6E 20 44 6F
	   72 77 65 69 6C
	   65 72 00
 0000003A 49 27 6C 6C 20	prompt2	BYTE "I'll give you a problem.  Enter your answer, and I'll tell",0
	   67 69 76 65 20
	   79 6F 75 20 61
	   20 70 72 6F 62
	   6C 65 6D 2E 20
	   20 45 6E 74 65
	   72 20 79 6F 75
	   72 20 61 6E 73
	   77 65 72 2C 20
	   61 6E 64 20 49
	   27 6C 6C 20 74
	   65 6C 6C 00
 00000075 79 6F 75 20 69	prompt3	BYTE "you if you are correct.",0
	   66 20 79 6F 75
	   20 61 72 65 20
	   63 6F 72 72 65
	   63 74 2E 00
 0000008D 41 6E 6F 74 68	another	BYTE "Another problem? (y/n): ",0
	   65 72 20 70 72
	   6F 62 6C 65 6D
	   3F 20 28 79 2F
	   6E 29 3A 20 00
 000000A6 4E 75 6D 62 65	q1		BYTE "Number of elements to chose from the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   73 65 20 66 72
	   6F 6D 20 74 68
	   65 20 73 65 74
	   3A 20 00
 000000D1 48 6F 77 20 6D	q2		BYTE "How many ways can you choose? ",0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   00
 000000F0 4E 75 6D 62 65	q3		BYTE "Number of elements in the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 00000110 54 68 65 72 65	ans1	BYTE "There are ",0
	   20 61 72 65 20
	   00
 0000011B 20 63 6F 6D 62	ans2	BYTE " combinations of ",0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 0000012D 20 69 74 65 6D	ans3	BYTE " items from a set of ",0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 00000143 50 72 6F 62 6C	prob	BYTE "Problem:",0
	   65 6D 3A 00
 0000014C 59 6F 75 20 61	right	BYTE "You are correct!",0
	   72 65 20 63 6F
	   72 72 65 63 74
	   21 00
 0000015D 49 6E 63 6F 72	wrong	BYTE "Incorrect, you need more practice",0
	   72 65 63 74 2C
	   20 79 6F 75 20
	   6E 65 65 64 20
	   6D 6F 72 65 20
	   70 72 61 63 74
	   69 63 65 00
 0000017F 49 6E 74 65 67	err		BYTE "Integers only! Please enter an integer number: ",0
	   65 72 73 20 6F
	   6E 6C 79 21 20
	   50 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 69 6E 74 65
	   67 65 72 20 6E
	   75 6D 62 65 72
	   3A 20 00
 000001AF 49 6E 76 61 6C	err2	BYTE "Invalid response ",0
	   69 64 20 72 65
	   73 70 6F 6E 73
	   65 20 00
 000001C1 4F 4B 20 2E 2E	goodbye	BYTE "OK ... goodbye.",0
	   2E 20 67 6F 6F
	   64 62 79 65 2E
	   00
 000001D1 00000000		sLength	DWORD	0
 000001D5 00			again	BYTE	?

 000001D6  00000064 [		inSt	BYTE	MAXSIZE DUP(?)		; User's string
	    00
	   ]
 0000023A 00000000		rval	DWORD ?
 0000023E 00000000		nval	DWORD ?
 00000242 00000000		rsave	DWORD ?
 00000246 00000000		nsave	DWORD ?
 0000024A 00000000		rnval	DWORD ?
 0000024E 00000000		usrAns	DWORD ?
 00000252 00000000		result	DWORD ?

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize		;seed PRNG

 00000005  E8 000001CF			call intro			;show user the intro heading

 0000000A  68 00000246 R		push OFFSET nsave
 0000000F  68 00000242 R		push OFFSET rsave
 00000014  68 0000023A R		push OFFSET rval
 00000019  68 0000023E R		push OFFSET nval
 0000001E  E8 0000021F			call showProblem	;generate random c(n,r) problem

 00000023  68 0000024E R		push OFFSET usrAns
 00000028  E8 00000156			call getdata		;read users response with writeStr

 0000002D  68 0000024A R		push OFFSET rnval
 00000032  68 00000252 R		push OFFSET result
 00000037  68 0000023E R		push OFFSET nval
 0000003C  68 0000023A R		push OFFSET rval
 00000041  E8 000000E5			call doCalc			;calculate c(n,r)

 00000046  FF 35 0000024E R		push usrAns
 0000004C  FF 35 00000246 R		push nsave
 00000052  FF 35 00000242 R		push rsave
 00000058  FF 35 00000252 R		push result
 0000005E  E8 00000007			call showResult		;evaluate users ans and show results
					 
					exit			
 0000006A			main ENDP

				; ****************** Show the result of the calculation *********
				;desc: this procedure shows the results of the c(n,r) calculation
				;receives: userAns, nsave, rsave, result by value
				;returns: print to screen
				;preconditions: the variables have been determined by other proc
				;registers changed eax, ecx both saved and restored 
				; ***************************************************************
 0000006A			showResult PROC
 0000006A  55				push ebp
 0000006B  8B EC			mov	ebp,esp

					WriteStr ans1
 0000006D  52		     1		push edx
 0000006E  BA 00000110 R     1		mov edx, OFFSET ans1
 00000073  E8 00000000 E     1		call WriteString
 00000078  5A		     1		pop edx
 00000079  8B 45 08			mov eax, [ebp+8]
 0000007C  E8 00000000 E		call writeDec

					WriteStr ans2
 00000081  52		     1		push edx
 00000082  BA 0000011B R     1		mov edx, OFFSET ans2
 00000087  E8 00000000 E     1		call WriteString
 0000008C  5A		     1		pop edx
 0000008D  8B 45 0C			mov eax, [ebp+12]
 00000090  E8 00000000 E		call writeDec

					WriteStr ans3
 00000095  52		     1		push edx
 00000096  BA 0000012D R     1		mov edx, OFFSET ans3
 0000009B  E8 00000000 E     1		call WriteString
 000000A0  5A		     1		pop edx
 000000A1  8B 45 10			mov eax, [ebp+16]
 000000A4  E8 00000000 E		call writeDec
 000000A9  E8 00000000 E		call crlf

 000000AE  8B 45 08			mov eax, [ebp+8]
 000000B1  8B 4D 14			mov ecx, [ebp+20]
 000000B4  3B C1			cmp eax, ecx
 000000B6  74 13			je correct

 000000B8			incorrect:
					WriteStr wrong
 000000B8  52		     1		push edx
 000000B9  BA 0000015D R     1		mov edx, OFFSET wrong
 000000BE  E8 00000000 E     1		call WriteString
 000000C3  5A		     1		pop edx
 000000C4  E8 00000000 E		call crlf
 000000C9  EB 11			jmp done
 000000CB			correct:
					WriteStr right
 000000CB  52		     1		push edx
 000000CC  BA 0000014C R     1		mov edx, OFFSET right
 000000D1  E8 00000000 E     1		call WriteString
 000000D6  5A		     1		pop edx
 000000D7  E8 00000000 E		call crlf

 000000DC			done:
					writeStr another
 000000DC  52		     1		push edx
 000000DD  BA 0000008D R     1		mov edx, OFFSET another
 000000E2  E8 00000000 E     1		call WriteString
 000000E7  5A		     1		pop edx
 000000E8  BA 000001D5 R		mov edx, OFFSET again
 000000ED  E8 00000000 E		call ReadString
 000000F2  8B F2			mov esi, edx	;move string here
 000000F4  FC				cld
 000000F5  AC				lodsb
 000000F6  3C 6E			cmp	al,110	; 'n' 
 000000F8  74 1C			je getOut
 000000FA  3C 79			cmp	al,121	; 'y'
 000000FC  74 0E			je runAgain
					WriteStr err2
 000000FE  52		     1		push edx
 000000FF  BA 000001AF R     1		mov edx, OFFSET err2
 00000104  E8 00000000 E     1		call WriteString
 00000109  5A		     1		pop edx
 0000010A  EB D0			jmp done

 0000010C			runAgain:
 0000010C  E8 00000000 E		call crlf
 00000111  E8 FFFFFEEA			call main
					 
 00000116			getOut:
					writeStr goodbye
 00000116  52		     1		push edx
 00000117  BA 000001C1 R     1		mov edx, OFFSET goodbye
 0000011C  E8 00000000 E     1		call WriteString
 00000121  5A		     1		pop edx
 00000122  E8 00000000 E		call crlf	
 00000127  5D				pop ebp
 00000128  C2 0010			ret 16

 0000012B			showResult ENDP

				; ****************** Do the C(n,r) calculation ******************
				;desc: does the c(n,r) calculation
				;receives: nrval, rval, nval, result by ref
				;returns: values are calculated and updated
				;preconditions: none
				;registers changed eax, ecx, edi all saved and restored 
				; ***************************************************************
 0000012B			doCalc PROC
 0000012B  51				push ecx
 0000012C  50				push eax
 0000012D  57				push edi
 0000012E  53				push ebx
 0000012F  55				push ebp
 00000130  8B EC			mov	ebp,esp
 00000132  83 EC 04			sub esp, 4			;3 locals

					;calc n-r
 00000135  8B 4D 1C			mov ecx, [ebp+28]
 00000138  8B 11			mov edx, [ecx]
 0000013A  8B 4D 18			mov ecx, [ebp+24]
 0000013D  8B 19			mov ebx, [ecx]
 0000013F  2B D3			sub edx, ebx
 00000141  8B 4D 24			mov ecx, [ebp+36]
 00000144  89 11			mov [ecx], edx

					;get r!	
 00000146  FF 75 18			push [ebp+24]	
 00000149  E8 000000C4			call factorial

					;get n!		
 0000014E  FF 75 1C			push [ebp+28]
 00000151  E8 000000BC			call factorial

					;get (n-r)!
 00000156  FF 75 24			push [ebp+36]		
 00000159  E8 000000B4			call factorial

 0000015E  8B 4D 24			mov ecx, [ebp+36]
 00000161  8B 39			mov edi, [ecx]		;(n-r)! in edi
 00000163  8B 4D 18			mov ecx, [ebp+24]
 00000166  8B 01			mov eax, [ecx]		;n!
 00000168  F7 E7			mul edi				
 0000016A  8B D8			mov ebx, eax		;n!(n-r)! in ebx

 0000016C  8B 7D 1C			mov edi, [ebp+28]
 0000016F  8B 07			mov eax, [edi]
 00000171  99				cdq
 00000172  F7 F3			div ebx
 00000174  8B 4D 20			mov ecx, [ebp+32]
 00000177  89 01			mov [ecx], eax		;store result

 00000179  8B E5			mov esp, ebp		;clean up locals
 0000017B  5D				pop ebp
 0000017C  5B				pop ebx
 0000017D  5F				pop edi
 0000017E  58				pop eax
 0000017F  59				pop ecx
 00000180  C2 0010			ret 16
 00000183			doCalc ENDP

				; ****************** get user value *****************************
				;desc: get the number input from the user.  Read it in as a string
				; and convert it to a number
				;receives: nval by ref
				;returns: nval is updated to the user's value
				;preconditions: none
				;registers changed edx, ecx, ebx, eax
				; ***************************************************************
 00000183			getData PROC
 00000183  55				push ebp
 00000184  8B EC			mov	ebp,esp
 00000186  8B 4D 08			mov	ecx,[ebp+8]		;nval
 00000189			top:
 00000189  BA 000001D6 R		mov	edx,OFFSET inSt
 0000018E  B9 00000064			mov	ecx,MAXSIZE
 00000193  E8 00000000 E		call ReadString
 00000198  8B F2			mov esi, edx	;move string here
 0000019A  A3 000001D1 R		mov	sLength,eax		;number of chars in string
 0000019F  8B C8			mov	ecx,eax
 000001A1  FC				cld
 000001A2  BB 00000000			mov ebx, 0

 000001A7			counter:
 000001A7  AC				lodsb
 000001A8  3C 30			cmp	al,48	; 'a' is character 97
 000001AA  7C 16			jl	notNum
 000001AC  3C 39			cmp	al,57	; 'z' is character 122
 000001AE  7F 12			jg	notNum
					
 000001B0  2C 30			sub al, 48
 000001B2  8A D0			mov dl, al ;store in dl
 000001B4  8A C3			mov al, bl
 000001B6  B6 0A			mov dh, 10	
 000001B8  F6 E6			mul dh
 000001BA  02 C2			add al,dl
 000001BC  8B D8			mov ebx, eax
 000001BE  E2 E7			loop	counter
 000001C0  EB 0E			jmp done

 000001C2			notNum:
					writeStr err
 000001C2  52		     1		push edx
 000001C3  BA 0000017F R     1		mov edx, OFFSET err
 000001C8  E8 00000000 E     1		call WriteString
 000001CD  5A		     1		pop edx
 000001CE  EB B9			jmp top

 000001D0			done:
 000001D0  8B 7D 08			mov edi, [ebp+8]
 000001D3  89 07			mov [edi], eax
 000001D5  5D				pop ebp
 000001D6  C2 0008			ret 8
 000001D9			getData ENDP

				; ****************** Print the intro header    ******************
				;desc: print out the start screen
				;receives: prompt1, promp2, prompt as string global
				;returns: prints to the screen
				;preconditions: none
				;registers changed edx
				; ***************************************************************
 000001D9			intro PROC
					WriteStr prompt1
 000001D9  52		     1		push edx
 000001DA  BA 00000000 R     1		mov edx, OFFSET prompt1
 000001DF  E8 00000000 E     1		call WriteString
 000001E4  5A		     1		pop edx
 000001E5  E8 00000000 E		call crlf
					WriteStr prompt2
 000001EA  52		     1		push edx
 000001EB  BA 0000003A R     1		mov edx, OFFSET prompt2
 000001F0  E8 00000000 E     1		call WriteString
 000001F5  5A		     1		pop edx
 000001F6  E8 00000000 E		call crlf
					WriteStr prompt3
 000001FB  52		     1		push edx
 000001FC  BA 00000075 R     1		mov edx, OFFSET prompt3
 00000201  E8 00000000 E     1		call WriteString
 00000206  5A		     1		pop edx
 00000207  E8 00000000 E		call crlf
 0000020C  E8 00000000 E		call crlf
 00000211  C3				ret
 00000212			intro ENDP

				; ****************** Recursive Factorial Calc  ******************
				;desc: Takes the number by ref and calculates the factorial of 
				; that number
				;receives: number by ref
				;returns: changes value stored in number
				;preconditions: none
				;registers eax, edi, ecx
				; ***************************************************************
 00000212			factorial PROC
 00000212  55				push ebp
 00000213  8B EC			mov	ebp,esp
 00000215  8B 7D 08			mov	edi,[ebp+8]		;number in ecx
 00000218  8B 07			mov eax, [edi]
 0000021A  83 EC 04			sub esp, 4			;locals
 0000021D  83 F8 00			cmp eax, 0
 00000220  74 15			je bcase

 00000222  89 45 FC			mov [ebp-4], eax	;store eax
					 
 00000225  48				dec eax
 00000226  89 07			mov [edi], eax
 00000228  57				push edi
 00000229  E8 FFFFFFE4			call factorial
 0000022E  8B 4D FC			mov ecx, [ebp-4]
 00000231  F7 E1			mul ecx
 00000233  89 07			mov [edi], eax
 00000235  EB 05			jmp quit	;skip over base

 00000237			bcase:
 00000237  B8 00000001			mov eax, 1

 0000023C			quit:
 0000023C  8B E5			mov esp, ebp		;clean up locals
 0000023E  5D				pop ebp
 0000023F  C2 0008			ret 8
 00000242			factorial ENDP

				; ****************** Display the problem  ***********************
				;desc: Generate a random c(n,r) problem and display it to the user
				;receives: nval,rval,nsave,rsave all by ref
				;returns: value in nval, rval, nsave, rsave are updated
				;preconditions: none
				;registers eax, edi, ecx saved and restored
				; ***************************************************************  
 00000242			showProblem PROC
 00000242  50				push eax
 00000243  57				push edi
 00000244  51				push ecx
 00000245  55				push ebp
 00000246  8B EC			mov	ebp,esp
 00000248  83 EC 04			sub esp, 4	
 0000024B  8B 4D 14			mov	ecx,[ebp+20]	;nval
 0000024E  8B 7D 18			mov	edi,[ebp+24]	;rval

					WriteStr prob
 00000251  52		     1		push edx
 00000252  BA 00000143 R     1		mov edx, OFFSET prob
 00000257  E8 00000000 E     1		call WriteString
 0000025C  5A		     1		pop edx
 0000025D  E8 00000000 E		call crlf
					WriteStr q3
 00000262  52		     1		push edx
 00000263  BA 000000F0 R     1		mov edx, OFFSET q3
 00000268  E8 00000000 E     1		call WriteString
 0000026D  5A		     1		pop edx
					;generate random n
 0000026E  B8 0000000C			mov eax,hi				;random int code used in lecture
 00000273  83 E8 03			sub eax,nlo
 00000276  40				inc eax
 00000277  E8 00000000 E		call RandomRange
 0000027C  83 C0 03			add eax, nlo
 0000027F  8B 7D 14			mov edi, [ebp+20]
 00000282  89 07			mov [edi], eax		;store random in rval
 00000284  89 45 FC			mov [ebp-4], eax
 00000287  8B 7D 20			mov edi, [ebp+32]
 0000028A  89 07			mov [edi], eax		;save nval again 

					; write rval
 0000028C  E8 00000000 E		call writeDec
 00000291  E8 00000000 E		call crlf
 00000296			l1:
 00000296  8B 45 FC			mov eax, [ebp-4]	;set rval as high limit				
 00000299  83 E8 01			sub eax,Rlo
 0000029C  40				inc eax
 0000029D  E8 00000000 E		call RandomRange
 000002A2  83 C0 01			add eax, rlo
 000002A5  8B 7D 18			mov edi, [ebp+24]
 000002A8  89 07			mov [edi], eax
 000002AA  8B 7D 1C			mov edi, [ebp+28]
 000002AD  89 07			mov [edi], eax		;save rval again 
 000002AF  3B 45 FC			cmp eax, [ebp-4]
 000002B2  7D E2			jge l1

					WriteStr q1
 000002B4  52		     1		push edx
 000002B5  BA 000000A6 R     1		mov edx, OFFSET q1
 000002BA  E8 00000000 E     1		call WriteString
 000002BF  5A		     1		pop edx
 000002C0  E8 00000000 E		call writeDec
 000002C5  E8 00000000 E		call crlf
					WriteStr q2
 000002CA  52		     1		push edx
 000002CB  BA 000000D1 R     1		mov edx, OFFSET q2
 000002D0  E8 00000000 E     1		call WriteString
 000002D5  5A		     1		pop edx


 000002D6  8B E5			mov esp, ebp		;clean up locals
 000002D8  5D				pop ebp
 000002D9  59				pop ecx
 000002DA  5F				pop edi
 000002DB  58				pop eax
 000002DC  C2 0008			ret 8
 000002DF			showProblem ENDP

				END main
 
Microsoft (R) Macro Assembler Version 10.00.30319.01	    03/10/14 09:08:05
&CS271 homework #6b			(combintions.asm     Symbols 2 - 1




Macros:

                N a m e                 Type

WriteStr . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000256 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002DF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
doCalc . . . . . . . . . . . . .	P Near	 0000012B _TEXT	Length= 00000058 Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 00000030 Public STDCALL
  bcase  . . . . . . . . . . . .	L Near	 00000237 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000023C _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 00000056 Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 00000189 _TEXT	
  counter  . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  notNum . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
intro  . . . . . . . . . . . . .	P Near	 000001D9 _TEXT	Length= 00000039 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 00000242 _TEXT	Length= 0000009D Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 00000296 _TEXT	
showResult . . . . . . . . . . .	P Near	 0000006A _TEXT	Length= 000000C1 Public STDCALL
  incorrect  . . . . . . . . . .	L Near	 000000B8 _TEXT	
  correct  . . . . . . . . . . .	L Near	 000000CB _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000DC _TEXT	
  runAgain . . . . . . . . . . .	L Near	 0000010C _TEXT	
  getOut . . . . . . . . . . . .	L Near	 00000116 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
Nlo  . . . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Rlo  . . . . . . . . . . . . . .	Number	 00000001h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
again  . . . . . . . . . . . . .	Byte	 000001D5 _DATA	
another  . . . . . . . . . . . .	Byte	 0000008D _DATA	
ans1 . . . . . . . . . . . . . .	Byte	 00000110 _DATA	
ans2 . . . . . . . . . . . . . .	Byte	 0000011B _DATA	
ans3 . . . . . . . . . . . . . .	Byte	 0000012D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
err2 . . . . . . . . . . . . . .	Byte	 000001AF _DATA	
err  . . . . . . . . . . . . . .	Byte	 0000017F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000001C1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hi . . . . . . . . . . . . . . .	Number	 0000000Ch   
inSt . . . . . . . . . . . . . .	Byte	 000001D6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nsave  . . . . . . . . . . . . .	DWord	 00000246 _DATA	
nval . . . . . . . . . . . . . .	DWord	 0000023E _DATA	
prob . . . . . . . . . . . . . .	Byte	 00000143 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000003A _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000075 _DATA	
q1 . . . . . . . . . . . . . . .	Byte	 000000A6 _DATA	
q2 . . . . . . . . . . . . . . .	Byte	 000000D1 _DATA	
q3 . . . . . . . . . . . . . . .	Byte	 000000F0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result . . . . . . . . . . . . .	DWord	 00000252 _DATA	
right  . . . . . . . . . . . . .	Byte	 0000014C _DATA	
rnval  . . . . . . . . . . . . .	DWord	 0000024A _DATA	
rsave  . . . . . . . . . . . . .	DWord	 00000242 _DATA	
rval . . . . . . . . . . . . . .	DWord	 0000023A _DATA	
sLength  . . . . . . . . . . . .	DWord	 000001D1 _DATA	
usrAns . . . . . . . . . . . . .	DWord	 0000024E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrong  . . . . . . . . . . . . .	Byte	 0000015D _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
