1.How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty
array which starts out at capacity 8, assuming that the array will
double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for
resizing, what is the big-oh complexity for a push?

cap = 8
1 2 3 4 5 5 6 7 8
cap = 16
1 2 3 4 5 5 6 7 8 17 18 19 20 21 22 23 24
cap = 32
1 2 3 4 5 5 6 7 8 17 18 19 20 21 22 23 24 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
Total cost: 56
Avg Cost: 1.75
Complexity for large N: O(1)+
 
2.
How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty
array which starts out at capacity 8, assuming that the array will
grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy
for resizing, what is the big-oh complexity for a push?

cap = 8
1 2 3 4 5 5 6 7 8
cap = 10
1 2 3 4 5 5 6 7 8 17 18
cap = 12
1 2 3 4 5 5 6 7 8 17 18 29 30
cap = 14
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44
cap = 16
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52
cap = 18
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70
cap = 20
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89
cap = 22
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111
cap = 24
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111 134 135
cap = 26
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111 134 135 160
cap = 28
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111 134 135 160 187 188
cap = 30
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111 134 135 160 187 188 217 218
cap = 32
1 2 3 4 5 5 6 7 8 17 18 29 30 43 44 51 52 69 70 88 89 110 111 134 135 160 187 188 217 218 249 250
Total cost: 250
Avg Cost: 7.8
complexity for large N: O(1)+

3.Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push()and pop() operations which will
result in poor performance (O(N^2)total cost)? How might you adjust the array's shrinking policy to avoid this?
(Hint: You may assume that the initial capacity of the array is N/2.

Pushing to an array that is full will double it's capacity.  Then popping from an array that is one over it's half capacity
will cause it to decrease by half.  Each resize costing N units of time.
A way to fix this is to not have the stack decrease down to it's full capacity.  For example, decrease the array by 3/4 only 
when it is half full. 

